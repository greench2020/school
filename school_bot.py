import datetime
import itertools
import os
import sys
import time
import loguru
import traceback
from asyncio import sleep
from datetime import timedelta

from vkbottle import Callback, GroupEventType
from vkbottle import Keyboard, KeyboardButtonColor, Text, CtxStorage, BaseStateGroup
from vkbottle import PhotoMessageUploader, DocMessagesUploader
from vkbottle.bot import Bot, Message, MessageEvent, Blueprint

from botdb import BotDB
from config import vk_acces_token, test_week, test_report, feedback_chat
from creating_images import create_img, create_report
from netschoolapi import NetSchoolAPI

loguru.logger.add('BotData/Logs/errors.txt', level="ERROR")
loguru.logger.add('BotData/Logs/informations.txt', level="INFO", encoding='cp866')

db = BotDB('/home/greench/mlok/BotData/DataBase/school_db.db')
db.making_table()

bot = Bot(vk_acces_token)
ctx = CtxStorage()
data = {}

daya = {'–ü–Ω': 0, '–í—Ç': 1, '–°—Ä': 2, '–ß—Ç': 3, '–ü—Ç': 4, '–°–±': 5, '–í—Å': 6}
w_daya = {0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
eng_daya = {'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}


class States(BaseStateGroup):
    login = '123123123'
    password = '—Ñ—ã–≤—Ñ—ã–≤'
    output_type = 'text'
    right_week = 'asdas'
    id_login = 123
    id_pass = 234
    report = 'report'
    id_answ = 543
    day = 'Monday'
    site = ''
    school = 'schoollll'


async def writing_to_file(name_function):
    with open('BotData/Logs/logs_functions.txt', 'a', encoding='utf-8') as f:
        f.write(name_function + ' ')


async def islogged(id_user):
    if db.get(id_user):
        user = db.get(id_user)[0]
        is_auth = user[-1]
        if is_auth == 'Yes':
            return True
        else:
            return False
    else:
        return False


async def beauty_text(list_lessons):
    res, result = "", []
    for lesson in list_lessons[1:]:
        if lesson != "":
            n_patterns = ['\n\nüìï ', '\n\u2800\u2800üìö ', '\n\u2800\u2800üìù ']

            lesson = lesson.strip()
            subject = lesson[:lesson.find(':')]
            if len(subject) > 17:
                subject = subject[:18] + '...'
            if lesson[-8:] != '–û—Ü–µ–Ω–∫–∞: ':
                mark = lesson[lesson.rfind(':') + 1:]
            else:
                mark = ''
            homework = lesson[lesson.find(':') + 2:lesson.find(' –û—Ü–µ–Ω–∫–∞: ')].replace('–û—Ü–µ–Ω–∫–∞', '')
            n_patterns[0] += subject
            n_patterns[1] += homework
            n_patterns[2] += mark
            for i in n_patterns:
                res += i
    return res


async def debugging(type_func, printed):
    with open('BotData/Logs/function_debug.txt', 'a') as debug_file:
        debug_file.write(
            f"Data: {datetime.datetime.today().strftime('%d-%m-%Y %H:%M:%S')}\n"
            f"Type: {type_func}\n\n"
            f"Printed: {printed}"
        )
        print(f"Data: {datetime.datetime.today().strftime('%d-%m-%Y %H:%M:%S')}\n"
            f"Type: {type_func}\n\n"
            f"Printed: {printed}")
        debug_file.close()


async def detection_days(msg):
    monday, monday_another_w = '', ''
    if not msg[:1].isnumeric():
        if msg.count("| –°–µ–≥–æ–¥–Ω—è") > 0:
            real_day = datetime.date.today()
        elif msg.count("| –ó–∞–≤—Ç—Ä–∞") > 0:
            real_day = datetime.date.today() + timedelta(days=1)
        elif msg.count("| –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞") > 0:
            real_day = datetime.date.today() + timedelta(days=2)
        else:
            monday = datetime.date.today() - timedelta(days=datetime.date.today().weekday())
            real_day = monday + timedelta(days=daya[msg[msg.rfind(' ') + 1:]])
    else:
        another_w_day = msg.split(' ')[0] + '.' + str(datetime.datetime.today().year)
        another_w_day = datetime.datetime.strptime(another_w_day, "%d.%m.%Y").date()
        monday_another_w = another_w_day - timedelta(days=another_w_day.weekday())
        real_day = another_w_day

    return monday_another_w, real_day, monday


@bot.on.private_message(payload={'logged': 'menu'})
async def logged_menu(message: Message):
    user = db.get(message.from_id)[0][-2]
    try:
        await bot.state_dispenser.delete(message.peer_id)
    except:
        pass
    if user == '–ú–û–£ –≥–∏–º–Ω–∞–∑–∏—è ‚Ññ 10':
        paylo = {'logged': 'schedule'}
    else:
        paylo = {'schedule': 'week'}
    keyboard = (
        Keyboard(inline=False, one_time=False)
        .add(Text('üìö –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', {'schedule': 'full_week'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìñ –î–Ω–µ–≤–Ω–∏–∫', {'logged': 'diary'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', payload=paylo), color=KeyboardButtonColor.PRIMARY)
        .add(Text('üìù –û—Ç—á–µ—Ç', {'logged': 'parentReport'}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {'logged': 'settings'}), color=KeyboardButtonColor.SECONDARY)
    )
    if not await islogged(message.from_id):
        text = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!\n\n–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.\n' \
               '–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—ã–¥—É–º–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤—ã–¥—É–º–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏.\n\n' \
               '–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ = )'
        keyboard.row().add(Text('üîë –í–æ–π—Ç–∏ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫', {'variant': 'login'}),
                           color=KeyboardButtonColor.POSITIVE)
    else:
        text = '–ú–µ–Ω—é...'
    await message.answer(
        message=text, keyboard=keyboard
    )
    await writing_to_file('logged_menu')


@bot.on.message(payload={'homework': 'day'})
async def homework_day(message: Message):
    first = time.time()
    res = 'üí§ –ù–µ—Ç —É—Ä–æ–∫–æ–≤, –æ—Ç–¥—ã—Ö–∞–π = )'
    detected = await detection_days(message.text)
    monday_another_w, real_day, monday = detected[0], detected[1], detected[2]
    data = {}
    msg = ''
    mark = ' –û—Ü–µ–Ω–∫–∞: '

    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]
    if await islogged(message.from_id):
        try:
            ns = NetSchoolAPI(site)
            await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –°–ì–û...')
            # Logging at NetSchoolAPI with Users Login And Password and getting result
            await ns.login(sgo_login,
                           sgo_password,
                           school)
            if not message.text[:1].isnumeric():

                # NOT Other days at this week
                if message.text[:2] != '–î–ó':
                    print(datetime.datetime.today().strftime("%A"))
                    # Not Sunday or Saturday -> Simple Diary
                    if datetime.datetime.today().strftime("%A") not in ['Sunday', 'Saturday']:
                        result = await ns.diary()
                        print('Simple Diary')
                    else:
                        if datetime.datetime.today().strftime("%A") == 'Sunday':
                            day_x = (datetime.date.today() + timedelta(days=1))
                            result = await ns.diary(start=day_x)
                            print('Sunday')
                        else:
                            if message.text.count('| –°–µ–≥–æ–¥–Ω—è') > 0:
                                result = await ns.diary()
                                print('Saturday Monday')
                            else:
                                day_x = (datetime.date.today() + timedelta(days=2))
                                result = await ns.diary(start=day_x)
                                print('Saturday other days')
                else:
                    result = await ns.diary()
            else:
                result = await ns.diary(start=monday_another_w)

            await ns.logout()
            await message.answer('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞...')
            # Creating week as list
            for days in result.schedule:
                data[str(days.day)] = []
                msg += '\n\n' + str(days.day) + 'koli'
                for lesson in days.lessons:
                    if len(lesson.assignments) > 0:
                        for i in range(len(lesson.assignments)):
                            if lesson.assignments[i].mark:
                                mark += str(lesson.assignments[i].mark)
                            else:
                                mark += ''
                        msg += '\n' + lesson.subject + ': ' + lesson.assignments[0].content + mark + 'koli'
                    else:
                        msg += '\n' + lesson.subject + ': –ù–µ –∑–∞–¥–∞–Ω–æ' + mark + 'koli'
                    mark = ' –û—Ü–µ–Ω–∫–∞: '
                data[str(days.day)] = msg.split("koli")
                msg = ''
            res = data[str(real_day)]
        except:
            await logged_menu(message)
    else:
        real_day = await detection_days(message.text)
        res = test_week[real_day[1].strftime("%A")]
        if real_day[1].strftime("%A") == 'Sunday':
            res = 'üí§ –ù–µ—Ç —É—Ä–æ–∫–æ–≤, –æ—Ç–¥—ã—Ö–∞–π = )'

    # Sending list of lessons to func, creating image
    if res != 'üí§ –ù–µ—Ç —É—Ä–æ–∫–æ–≤, –æ—Ç–¥—ã—Ö–∞–π = )':
        if await islogged(message.from_id):
            keyboard = (Keyboard(one_time=False,
                                 inline=False)).add(Text('‚Ñπ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', {'homework': 'details'}),
                                                    color=KeyboardButtonColor.PRIMARY).row().add(Text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY)
        else:
            keyboard = (Keyboard(one_time=False,
                                 inline=False)).add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY)

        if output_type == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
            await message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...')
            image = create_img(res, message.from_id)
            doc = await PhotoMessageUploader(bot.api).upload(
                title='image.jpg', file_source=image, peer_id=message.peer_id
            )
            await message.answer(message='\xa0', attachment=doc, keyboard=keyboard)
            os.remove(image)

        elif output_type == '–¢–µ–∫—Å—Ç':
            await message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
            date = datetime.datetime.strptime(res[0].strip(), "%Y-%m-%d").date()
            weekday = w_daya[date.weekday()]
            res = '\n\n\n‚úÖ ' + weekday + await beauty_text(res)
            await message.answer(message=res, keyboard=keyboard)
    else:
        await message.answer(res)
    print(time.time() - first)
    await writing_to_file('homework_day')


@bot.on.message(text=['–ù–∞—á–∞—Ç—å'])
@bot.on.message(command='start')
async def start(message: Message):
    user = db.get(message.from_id)
    if not user:
        user_info = await bot.api.users.get(message.from_id)
        first = user_info[0].first_name
        sec = user_info[0].last_name

        db.adding_user(message.from_id, first, sec)
        await bot.api.messages.send(peer_id=feedback_chat, random_id=0, message=f'Added @id{message.from_id}')
        print(f'Added {message.from_id} successfully')
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Å–∏—Å—Ç–µ–º–µ!\n'
                             '–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π:\n\n\n'
                             'P.S. –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ë–µ—Ç–∞-–¢–µ—Å—Ç, –≤ —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                             '–ø—É–Ω–∫—Ç–æ–º "–ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö = )',
                             keyboard=(Keyboard(inline=False, one_time=True)
                                       .add(Text('üö™ –¢–µ—Å—Ç–æ–≤—ã–π –í–∞—Ä–∏–∞–Ω—Ç (–ë–µ–∑ –≤—Ö–æ–¥–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫)', {'logged': 'menu'}),
                                            color=KeyboardButtonColor.PRIMARY)
                                       .add(Text('üîê –í–æ–π—Ç–∏ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫', {'variant': 'login'}),
                                            color=KeyboardButtonColor.PRIMARY)
                                       )
                             )
    else:
        await logged_menu(message)
    await writing_to_file('start')


@bot.on.private_message(lev='–ío–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
@bot.on.private_message(payload={'variant': 'login'})
async def login(message: Message):
    db.set_site_and_school(message.from_id, '–ú–û–£ –≥–∏–º–Ω–∞–∑–∏—è ‚Ññ 10')
    await bot.state_dispenser.set(message.peer_id, States.login)
    await message.answer('‚ùì –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –í–ö –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n'
                         '\n\n\n'
                         '‚ùó‚ùó‚ùó –í–ù–ò–ú–ê–ù–ò–ï ‚ùó‚ùó‚ùó\n'
                         '–í–≤–æ–¥—è —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ —Å—Å—ã–ª–∫–µ:\n'
                         'vk.com/@gymnasium_10_vlg-politika-v-otnoshenii-obrabotki-personalnyh-dannyh\n\n'
                         'üîí –í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω, –∫–∞–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ "–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥.–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ',
                         keyboard=Keyboard(one_time=True, inline=False)
                         .add(Callback('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.NEGATIVE)
                         )
    await writing_to_file('login')


@bot.on.private_message(state=States.login)
async def password(message: Message):
    ctx.set('login', message.text)
    await bot.state_dispenser.set(message.peer_id, States.password)
    await message.answer('üîë –í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å, –∫–∞–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ "–°–µ—Ç–µ–≤–æ–π –ì–æ—Ä–æ–¥.–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":',
                         keyboard=Keyboard(one_time=True, inline=False)
                         .add(Callback('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.NEGATIVE))
    await writing_to_file('password')


@bot.on.private_message(state=States.password)
async def result_login(message: Message):
    try:
        name = ctx.get('login')
        ctx.set('password', message.text)
        await bot.state_dispenser.delete(message.peer_id)
        id_ans = await message.answer(f'‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n\n'
                                      f'üîí –õ–æ–≥–∏–Ω: {name}\n'
                                      f'üîë –ü–∞—Ä–æ–ª—å: {message.text}\n\n'
                                      f'–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –∏–∑ –¥—Ä—É–≥–æ–π —à–∫–æ–ª—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"\n',
                                      keyboard=(Keyboard(inline=False, one_time=True)
                                                .add(Text('‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!', {'choose': 'output'}),
                                                     color=KeyboardButtonColor.POSITIVE)
                                                .add(Text('üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', {'variant': 'login'}),
                                                     color=KeyboardButtonColor.PRIMARY)
                                                .row()
                                                .add(Text('‚öô –î—Äy–≥–∏–µ –Ωa—Å—Çp–æ–π–∫–∏', {'logged': 'other_settings'}),
                                                     color=KeyboardButtonColor.SECONDARY))
                                      )
        ctx.set('id_answ', id_ans.message_id)
    except Exception as e:
        await message.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã –æ –ø—Ä–æ–±–ª–µ–º–µ. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è.')
        await bot.api.messages.send(359707430, random_id=0, message=f'Error with {message.from_id}!\n {e}')
        await logged_menu(message)
    await writing_to_file('result_login')


@bot.on.private_message(lev='–î—Äy–≥–∏–µ –Ωa—Å—Çp–æ–π–∫–∏')
@bot.on.private_message(payload={'logged': 'other_settings'})
async def site_settings(message: Message):
    await bot.state_dispenser.set(message.peer_id, States.school)
    await message.answer(message='‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —à–∫–æ–ª—ã (–¢–æ—á—å-–≤-—Ç–æ—á—å, –∫–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∫–æ–ª—ã): \n\n'
                                 '–ü—Ä–∏–º–µ—Ä: "–ú–û–£ –≥–∏–º–Ω–∞–∑–∏—è ‚Ññ10", "–ú–û–£ –°–û–® ‚Ññ57"',
                         keyboard=Keyboard(one_time=True, inline=False)
                         .add(Callback('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.NEGATIVE))
    await writing_to_file('site_settings')


@bot.on.private_message(state=States.school)
async def school_settings(message: Message):
    await bot.state_dispenser.delete(message.peer_id)
    name = ctx.get('login')
    password = ctx.get('password')
    db.set_site_and_school(message.from_id, message.text)
    res = await message.answer(message='‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ: \n'
                                       f'üîí –ò–º—è: {name}\n'
                                       f'üîë –ü–∞—Ä–æ–ª—å: {password}\n'
                                       f'üè´ –®–∫–æ–ª–∞: {message.text}',
                               keyboard=(Keyboard(inline=False, one_time=True)
                                         .add(Text('‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!', {'choose': 'output'}),
                                              color=KeyboardButtonColor.POSITIVE)
                                         .add(Text('üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', {'logged': 'other_settings'}),
                                              color=KeyboardButtonColor.PRIMARY)
                                         )
                               )
    await sleep(30)
    await bot.api.messages.delete(res.message_id, peer_id=message.peer_id, delete_for_all=True)
    await writing_to_file('school_settings')


@bot.on.private_message(payload={'choose': 'output'})
async def choose_output(message: Message):
    await message.answer('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
    name = ctx.get('login')
    password = ctx.get('password')
    man = db.get(message.from_id)[0]
    site, school = man[-3], man[-2]
    id_n = ctx.get('id_answ')

    try:
        ns = NetSchoolAPI(site)
        a = await ns.login(name, password, school)
        print(a)
        await ns.diary()
    except Exception as e:
        print(e)
        id_ans = await message.answer(f'‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!\n\n'
                                      f'üîí –õ–æ–≥–∏–Ω: {name}\n'
                                      f'üîë –ü–∞—Ä–æ–ª—å: {password}\n'
                                      f'üè´ –®–∫–æ–ª–∞: {school}\n'
                                      f'üï∏ –°–∞–π—Ç: {site}',
                                      keyboard=Keyboard(inline=False, one_time=True)
                                      .add(Text('üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', {'variant': 'login'}),
                                           color=KeyboardButtonColor.PRIMARY))
        await sleep(30)
        await bot.api.messages.delete(peer_id=message.from_id,
                                      message_ids=id_ans.message_id,
                                      delete_for_all=True)
        await bot.api.messages.delete(peer_id=message.from_id,
                                      message_ids=id_n,
                                      delete_for_all=True)
    else:
        db.update(message.from_id, name, password)
        db.set_authorize(message.from_id, 'Yes')
        await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ!')
        await message.answer(message='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:',
                             keyboard=(Keyboard(one_time=True, inline=False)
                                       .add(Text('üí¨ –¢–µ–∫—Å—Ç', {'choose_output': 'Done'}), color=KeyboardButtonColor.PRIMARY)
                                       .add(Text('üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {'choose_output': 'Done'}),
                                            color=KeyboardButtonColor.PRIMARY)
                                       )
                             )
        await bot.api.messages.delete(peer_id=message.from_id,
                                      message_ids=id_n,
                                      delete_for_all=True)
    await writing_to_file('choose_output')


@bot.on.private_message(payload={'choose': 'output_l'})
async def choose_output_l(message: Message):
    await message.answer(message='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:',
                         keyboard=(
                             Keyboard(one_time=True, inline=False)
                             .add(Text('üí¨ –¢–µ–∫—Å—Ç', {'choose_output': 'Done'}), color=KeyboardButtonColor.PRIMARY)
                             .add(Text('üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {'choose_output': 'Done'}),
                                  color=KeyboardButtonColor.PRIMARY)
                         )
                         )
    await writing_to_file('choose_output_l')


@bot.on.private_message(payload={'choose_output': 'Done'})
async def go_to_menu(message: Message):
    db.set_output_type(message.from_id, message.text.split()[1])
    await message.answer(message=f'‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –í—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ {message.text}.\n'
                                 f'–í—ã–±–æ—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö = )',
                         keyboard=(Keyboard(one_time=True, inline=False)
                                   .add(Text('üè° –í –º–µ–Ω—é', {'logged': 'menu'}))
                                   )
                         )
    await writing_to_file('go_to_menu')


@bot.on.private_message(payload={'schedule': 'full_week'})
async def full_week(message: Message):
    data = {}
    msg = ''
    mark = ' –û—Ü–µ–Ω–∫–∞: '
    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]
    if await islogged(message.from_id):
        ns = NetSchoolAPI(site)
        await ns.login(sgo_login, sgo_password, school)
        schedule = await ns.diary()
        for days in schedule.schedule:
            data[str(days.day)] = []
            msg += '\n\n' + str(days.day) + 'koli'
            for lesson in days.lessons:
                if len(lesson.assignments) > 0:
                    for i in range(len(lesson.assignments)):
                        if lesson.assignments[i].mark:
                            mark += str(lesson.assignments[i].mark)
                        else:
                            mark += ''
                    msg += '\n' + lesson.subject + ': ' + lesson.assignments[0].content + mark + 'koli'
                else:
                    msg += '\n' + lesson.subject + ': –ù–µ –∑–∞–¥–∞–Ω–æ' + mark + 'koli'
                mark = ' –û—Ü–µ–Ω–∫–∞: '
            data[str(days.day)] = msg.split("koli")
            msg = ''
        result = data
    else:
        result = dict(itertools.islice(test_week.items(), 6))

    if output_type == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        num = 0
        path_list = []
        pic_list = []
        await message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
        for day in result.keys():
            day = result[day]
            image = create_img(day, str(message.from_id) + f'_{num}')
            pic_list.append(image)
            path_list += image + ', '
            num += 1
            doc = await PhotoMessageUploader(bot.api).upload(
                title='image.jpg', file_source=image, peer_id=message.peer_id
            )
            path_list.append(doc)
        await message.answer(message='\xa0', attachment=path_list)
        for pic in pic_list:
            os.remove(pic)
            print('Deleted pictures')
    elif output_type == '–¢–µ–∫—Å—Ç':
        res = ''
        for day in result.keys():
            day = result[day]
            date = datetime.datetime.strptime(day[0].strip(), "%Y-%m-%d").date()
            weekday = w_daya[date.weekday()]
            res += '\n\n\n‚úÖ ' + weekday + await beauty_text(day) + '\n'
        await message.answer(res)
    await writing_to_file('full_week')


@bot.on.private_message(payload={'homework': 'details'})
async def homework_details(message: Message):
    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]

    try:
        id_mes = (await bot.api.messages.get_history(count=1, peer_id=message.peer_id)).items[0].id - 5
        text = await bot.api.messages.get_by_id([id_mes])
        date = await detection_days(text.items[0].text)
        ns = NetSchoolAPI(site)
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –°–ì–û...')
        # Logging at NetSchoolAPI with Users Login And Password and getting result
        await ns.login(sgo_login,
                       sgo_password,
                       school)
        result = await ns.diary(start=date[1], end=date[1])
        date_local = date[1].strftime('%d.%m.%Y')[:date[1].strftime('%d.%m.%Y').rfind('.')]
        lessons_list, result_list = [], []
        await message.answer('üßê –ü–æ–∏—Å–∫ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π...')
        for days in result.schedule:
            for lesson in days.lessons:
                if lesson.assignments:
                    family = await ns.details(lesson.assignments[0].id)
                    if family['description']:
                        description = family['description']
                    else:
                        description = None

                    if family['attachments']:
                        attachments = await ns.download_attachment(family['attachments'])
                    else:
                        attachments = None

                    if lesson.subject.count('–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å') > 0:
                        if len(lesson.subject.strip('–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å ')) > 30:
                            scopes = lesson.subject[lesson.subject.find('"'):lesson.subject.rfind(""'') + 1].split(' ')
                            subject = '–≠–ª.–∫—É—Ä—Å' + scopes[0] + '..' + scopes[-1]
                        else:
                            subject = lesson.subject.strip('–≠–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å ')
                    else:
                        subject = lesson.subject

                    if subject in lessons_list:
                        pos_les = 0
                        for work in range(len(lessons_list)):
                            if lessons_list[work].count(subject) > 0:
                                pos_les = work

                        if lessons_list[pos_les][-1] == ')' and lessons_list[pos_les][-2].isnumeric():
                            subject = subject + str(int(lessons_list[pos_les][-2]) + 1)
                        else:
                            subject += '(1)'

                    lessons_list.append(subject)
                    if attachments or description:
                        result_list.append(subject)
        print('details', result_list + lessons_list)
        await message.answer('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...')
        keyboard = Keyboard(one_time=True, inline=False)
        if result_list:
            for attach in range(len(result_list)):
                if attach != len(result_list) - 1:
                    keyboard.add(Text(f'{date_local} | {result_list[attach]}', {'lessons': 'attachments'}),
                                 color=KeyboardButtonColor.POSITIVE)
                    keyboard.row()
                else:
                    keyboard.add(Text(f'{date_local} | {result_list[attach]}', {'lessons': 'attachments'}),
                                 color=KeyboardButtonColor.POSITIVE)
            await message.answer('–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ –¥–Ω–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n\n'
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n',
                                 keyboard=keyboard)
        else:
            await message.answer('–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π...')
            await logged_menu(message)
    except Exception as e:
        await message.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã –æ –ø—Ä–æ–±–ª–µ–º–µ.\n'
                             '‚ùó –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await bot.api.messages.send(peer_ids=feedback_chat, random_id=0,
                                    message=f'–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_id}:\n\n'
                                            f'{traceback.format_exc()}')
        await logged_menu(message)

    await writing_to_file('homework_details')


@bot.on.private_message(payload={'lessons': 'attachments'})
async def lessons_attachment(message: Message):
    await message.answer('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π...')
    subject = message.text[message.text.find('| ') + 2:]
    result_dict, total_lesson = {}, ''

    date = message.text[:message.text.find(' ')] + '.' + str(datetime.date.today().year)
    real_date = datetime.datetime.strptime(date, '%d.%m.%Y')
    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]

    ns = NetSchoolAPI(site)
    await ns.login(sgo_login, sgo_password, school)
    result = await ns.diary(start=real_date, end=real_date)
    for lesson in result.schedule[0].lessons:
        if lesson.assignments:
            data[lesson.subject] = lesson.assignments[0].id

    if subject[-2].isnumeric() and subject[-1] == ')':
        for work in data.keys():
            if subject[:-3] in work:
                result_dict[work] = data[work]
        key = int(subject[-2]) - 1
        total_lesson = list(result_dict.keys())[key]
    else:
        for work in data.keys():
            if subject in work:
                print('Yes')
                total_lesson = data[work]

    family = await ns.details(total_lesson)
    loguru.logger.info(f'{family} {message.from_id}')
    if family['description']:
        description = 'üñπ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç —É—á–∏—Ç–µ–ª—è: \n' + family['description'] + '\n'
    else:
        description = 'ü§∑ –ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç —É—á–∏—Ç–µ–ª—è...\n'

    if family['attachments']:
        doc_list = []
        attachments = await ns.download_attachment_as_bytes(family['attachments'])
        for file in attachments:
            doc = await DocMessagesUploader(bot.api).upload(
                title=file['name'],
                file_source=file['file'],
                peer_id=message.from_id
            )
            doc_list.append(doc)

        files = '\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
    else:
        doc_list = []
        files = '\nü§∑ –ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ = ('
    await message.answer(message=description + files, attachment=doc_list)
    await logged_menu(message)


    await writing_to_file('lessons_attachment')


@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def on_settings(event: MessageEvent):
    try:
        await bot.state_dispenser.delete(event.peer_id)
    except:
        print('No state')

    if db.get(event.user_id)[0][-2] == '–ú–û–£ –≥–∏–º–Ω–∞–∑–∏—è ‚Ññ 10':
        paylo = {'logged': 'schedule'}
    else:
        paylo = {'schedule': 'week'}

    keyboard = (
        Keyboard(inline=False, one_time=False)
        .add(Text('üìö –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', {'schedule': 'full_week'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìñ –î–Ω–µ–≤–Ω–∏–∫', {'logged': 'diary'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', payload=paylo), color=KeyboardButtonColor.PRIMARY)
        .add(Text('üìù –û—Ç—á–µ—Ç', {'logged': 'parentReport'}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {'logged': 'settings'}), color=KeyboardButtonColor.SECONDARY)
    )
    if not await islogged(event.peer_id):
        text = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.\n' \
               'üëã –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—ã–¥—É–º–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤—ã–¥—É–º–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏.\n\n' \
               'üëã –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ = )'
        keyboard.row().add(Text('–í–æ–π—Ç–∏ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫', {'variant': 'login'}),
                           color=KeyboardButtonColor.POSITIVE)
    else:
        text = '...'
    await event.show_snackbar(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ!')
    await event.send_message(
        message=text, keyboard=str(keyboard)
    )
    await writing_to_file('on_settings')


@bot.on.message(payload={'homework': 'chooseday_l'})
async def choose_day(message: Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:',
        keyboard=(
            Keyboard(inline=False, one_time=False)
            .row()
            .add(Text('–î–ó | –ü–Ω', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text('–î–ó | –í—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text('–î–ó | –°—Ä', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .row()
            .add(Text('–î–ó | –ß—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text('–î–ó | –ü—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text('–î–ó | –°–±', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .row()
            .add(Text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY)
        )
    )
    await writing_to_file('choose_day')


@bot.on.private_message(payload={'logged': 'diary'})
async def diary(message: Message):
    await message.answer(message='...',
                         keyboard=(
                             Keyboard(inline=False, one_time=False)
                             .add(Text(
                                 f'{list(daya.keys())[list(daya.values()).index(datetime.date.today().weekday())]} | –°–µ–≥–æ–¥–Ω—è',
                                 {'homework': 'day'}), color=KeyboardButtonColor.POSITIVE)
                             .add(Text(
                                 f'{list(daya.keys())[list(daya.values()).index((datetime.date.today() + timedelta(days=1)).weekday())]} | –ó–∞–≤—Ç—Ä–∞',
                                 {'homework': 'day'}), color=KeyboardButtonColor.POSITIVE)
                             .add(Text(
                                 f'{list(daya.keys())[list(daya.values()).index((datetime.date.today() + timedelta(days=2)).weekday())]} | –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞',
                                 {'homework': 'day'}), color=KeyboardButtonColor.POSITIVE)
                             .row()
                             .add(Text('üìÖ –î—Ä—É–≥–∏–µ –¥–Ω–∏', {'homework': 'chooseday_l'}), color=KeyboardButtonColor.PRIMARY)
                             .add(Text('üìÖ –î—Äy–≥a—è –Ω–µ–¥e–ª—è', {'homework': 'another_week'}),
                                  color=KeyboardButtonColor.PRIMARY))
                         .row()
                         .add(Text('üè° –í –º–µ–Ω—é', {'logged': 'menu'}))
                         )
    await writing_to_file('diary')


@bot.on.private_message(payload={'homework': 'another_week'})
async def another_week(message: Message):
    monday = datetime.date.today() - timedelta(days=datetime.date.today().weekday())
    list_mondays = [((monday + timedelta(days=7) - timedelta(days=(i - 1) * 7)).strftime("%d-%m-%Y"),
                     (monday + timedelta(days=7) - timedelta(days=(i - 1) * 7) + timedelta(days=6)).strftime(
                         "%d-%m-%Y")) for i in range(5)]
    list_mondays = list(reversed(list_mondays))

    keyboard = Keyboard(inline=False, one_time=False)
    for i in range(len(list_mondays)):

        if i == 2:
            condition = '–¢–µ–∫—É—â.'
            color = KeyboardButtonColor.POSITIVE
        elif i == 1:
            condition = '–ü—Ä–æ—à–ª'
            color = KeyboardButtonColor.SECONDARY
        elif i == 0:
            condition = '–ü–æ–∑–∞–ø—Ä–æ—à–ª.'
            color = KeyboardButtonColor.SECONDARY
        elif i == 3:
            condition = '–°–ª–µ–¥.'
            color = KeyboardButtonColor.SECONDARY
        else:
            condition = '–ü–æ—Å–ª–µ–¥—É—é—â.'
            color = KeyboardButtonColor.SECONDARY

        keyboard.add(
            Text(list_mondays[i][0].replace('-', '.') + '-' + list_mondays[i][1].replace('-', '.') + f' ({condition})',
                 {'another_week': 'day'}), color=color).row()
    await message.answer(message='...',
                         keyboard=keyboard.add(Text('üè° –í –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY
                                               )
                         )
    await writing_to_file('another_week')


@bot.on.private_message(payload={'another_week': "day"})
async def another_week_day(message: Message):
    right_monday = message.text.split('-')[0]
    date_monday = datetime.datetime.strptime(right_monday, '%d.%m.%Y').date()
    list_days = [date_monday + timedelta(days=i) for i in range(6)]
    list_days = [i.strftime('%d.%m.%Y').replace('-', '.')[:i.strftime('%d.%m.%Y').replace('-', '.').rfind('.')] for i in
                 list_days]
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:',
        keyboard=(
            Keyboard(inline=False, one_time=False)
            .row()
            .add(Text(f'{str(list_days[0])} –î–ó | –ü–Ω', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text(f'{str(list_days[1])} –î–ó | –í—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text(f'{str(list_days[2])} –î–ó | –°—Ä', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .row()
            .add(Text(f'{str(list_days[3])} –î–ó | –ß—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text(f'{str(list_days[4])} –î–ó | –ü—Ç', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .add(Text(f'{str(list_days[5])} –î–ó | –°–±', {'homework': 'day'}), color=KeyboardButtonColor.SECONDARY)
            .row()
            .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY)
        )
    )
    await writing_to_file('another_week_day')


@bot.on.private_message(payload={'logged': 'schedule'})
async def schedule(message: Message):
    if await islogged(message.from_id):
        await message.answer(message='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ', keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üéí –£—Ä–æ–∫–æ–≤', {'schedule': 'week'}), color=KeyboardButtonColor.PRIMARY)
                             .add(Text('üîî –ó–≤–æ–Ω–∫–æ–≤', {'schedule': 'rings'}), color=KeyboardButtonColor.PRIMARY)
                             .row()
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY))
    else:
        await schedule_week(message)
    await writing_to_file('schedule')


@bot.on.private_message(payload={'schedule': 'rings'})
async def schedule_rings(message: Message):
    if datetime.date.today().weekday() == 0:
        doc = await PhotoMessageUploader(bot.api).upload(
            title='image.jpg', file_source=os.getcwd() + '/BotData/Pics/monday.jpg', peer_id=message.peer_id
        )
        now_day = '–Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    else:
        doc = await PhotoMessageUploader(bot.api).upload(
            title='image.jpg', file_source=os.getcwd() + '/BotData/Pics/other_days.jpg', peer_id=message.peer_id
        )
        now_day = ''

    await message.answer(message=f'üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤{now_day}',
                         keyboard=Keyboard(one_time=True, inline=False)
                         .add(Text('üîÑ –î—Ä—É–≥–æ–π –¥–µ–Ω—å', {'rings': 'day'}), color=KeyboardButtonColor.PRIMARY)
                         .row()
                         .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY), attachment=doc)
    await writing_to_file('schedule_rings')


@bot.on.private_message(payload={'rings': 'day'})
async def rings_day(message: Message):
    if datetime.date.today().weekday() != 0:
        doc = await PhotoMessageUploader(bot.api).upload(
            title='image.jpg', file_source=os.getcwd() + '/BotData/Pics/monday.jpg', peer_id=message.peer_id
        )
        now_day = '–Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    else:
        doc = await PhotoMessageUploader(bot.api).upload(
            title='image.jpg', file_source=os.getcwd() + '/BotData/Pics/other_days.jpg', peer_id=message.peer_id
        )
        now_day = ''
    await message.answer(message=f'üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ {now_day}',
                         keyboard=Keyboard(one_time=True, inline=False)
                         .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY) ,attachment=doc)
    await writing_to_file('rings_day')


@bot.on.private_message(payload={'schedule': 'week'})
async def schedule_week(message: Message):
    res = ''
    data = {}
    if await islogged(message.from_id):
        user = db.get(message.from_id)[0]
        sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]
        ns = NetSchoolAPI(site)
        await ns.login(sgo_login, sgo_password, school)
        result = await ns.diary()

        # Generating dict of diary
        for days in result.schedule:
            day = w_daya[days.day.weekday()]
            data[day] = ''
            lessons = days.lessons
            for lesson in lessons:
                subject = lesson.subject
                data[day] += '\u2800' + subject + '\n81679am'

    else:
        for i in test_week.keys():
            if i != 'Sunday':
                data[eng_daya[i]] = ''
                for lesson in test_week[i][1:-1]:
                    subject = lesson[:lesson.find(":")]
                    print(subject)
                    data[eng_daya[i]] += '\u2800' + subject.strip() + '\n81679am'

    # Generating answer
    if data != {}:
        for i in data.keys():
            data[i] = data[i].split('81679am')

        for i in data.keys():
            res += '\nüìÖ  ' + i + '\n'

            for num in range(len(data[i]) - 1):
                res += str(num + 1) + ') ' + data[i][num]

        await message.answer(res, keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY))
    else:
        await message.answer('üí§ –ù–µ—Ç —É—Ä–æ–∫–æ–≤, –æ—Ç–¥—ã—Ö–∞–π = )', keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY))
    await writing_to_file('schedule_week')


@bot.on.private_message(payload={'logged': 'parentReport'})
async def parent_report(message: Message):
    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type, site, school = user[2], user[3], user[4], user[7], user[8]
    ns = NetSchoolAPI(site)
    if await islogged(message.from_id):

        await ns.login(sgo_login, sgo_password, school)
        report = await ns.parentReport()
        await ns.logout()
    else:
        report = test_report

    # Generating answer
    if output_type == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        await message.answer(' üñº –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...')
        path = create_report(report, message.from_id)
        doc = await PhotoMessageUploader(bot.api).upload(
            title='image.jpg', file_source=path, peer_id=message.peer_id
        )
        await message.answer(message='...', attachment=doc, keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY))
        os.remove(path)
    elif output_type == '–¢–µ–∫—Å—Ç':
        result = f"üîò–û–±—â–∏–µ:\n5Ô∏è‚É£: {report['total']['5']}\n4Ô∏è‚É£: {report['total']['4']}\n3Ô∏è‚É£: {report['total']['3']}\n2Ô∏è‚É£: " \
                 f"{report['total']['2']}\n„Ä∞Ô∏è–°—Ä–µ–¥–Ω—è—è: {report['total']['average']}\n" \
                 f"üóí–°—Ä–µ–¥–Ω—è—è –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å: {report['total']['average_term']}\n\n"
        for subject in report['subjects'].keys():
            result += f"üî∂{subject}:\n–û—Ü–µ–Ω–∫–∞ 5: {report['subjects'][subject]['5']} –û—Ü–µ–Ω–∫–∞ 4: " \
                      f"{report['subjects'][subject]['4']}\n–û—Ü–µ–Ω–∫–∞ 3: " \
                      f"{report['subjects'][subject]['3']} –û—Ü–µ–Ω–∫–∞ 2: {report['subjects'][subject]['2']}\n„Ä∞Ô∏è" \
                      f"–°—Ä–µ–¥–Ω—è—è: {report['subjects'][subject]['average']}\nüóí–ó–∞ —á–µ—Ç–≤–µ—Ä—Ç—å: " \
                      f"{report['subjects'][subject]['term']}\n\n"
        await message.answer(result, keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.PRIMARY))
    await writing_to_file('parent_report')


@bot.on.private_message(payload={'logged': 'settings'})
async def settings(message: Message):
    user = db.get(message.from_id)[0]
    sgo_login, sgo_password, output_type = user[2], user[3], user[4]
    if await islogged(message.from_id):
        res = await message.answer(message=f'ü§≠–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
                                           f'üîí –õ–æ–≥–∏–Ω: {sgo_login[:2] + "**" + sgo_login[-2:]}\n'
                                           f'üîë –ü–∞—Ä–æ–ª—å: {sgo_password[:2] + "**" + sgo_password[-2:]}\n'
                                           f'üñº –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {output_type}',
                                   keyboard=Keyboard(one_time=True, inline=False)
                                   .add(Text('üßê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ', {'show': 'userdata'}),
                                        color=KeyboardButtonColor.PRIMARY)
                                   .row()
                                   .add(Text('üîÑ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {'variant': 'login'}),
                                        color=KeyboardButtonColor.PRIMARY)
                                   .add(Text('üì∫ –¢–∏–ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è', {'choose': 'output_l'}),
                                        color=KeyboardButtonColor.PRIMARY)
                                   .row()
                                   .add(Text('üì¢ –ña–ª–æ–±a/–üp–µ–¥–ªo–∂–µ–Ω–∏e', {'settings': 'info'}),
                                        color=KeyboardButtonColor.NEGATIVE)
                                   .row()
                                   .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                                   )
    else:
        await message.answer(message='ü§≠ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\nüîí –õ–æ–≥–∏–Ω: –ü—É–ø–∫–∏–Ω–í2\nüîë –ü–∞—Ä–æ–ª—å: –ì–∏–º–Ω–∞–∑–∏—è_10_love\n'
                                     f'üñº –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {output_type}',
                             keyboard=Keyboard(one_time=True, inline=False)
                             .add(Text('üîÑ –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                                       {'choose': 'output_l'}), color=KeyboardButtonColor.PRIMARY)
                             .row()
                             .add(Text('üì¢ –ña–ª–æ–±a/–üp–µ–¥–ªo–∂–µ–Ω–∏e', {'settings': 'info'}), color=KeyboardButtonColor.NEGATIVE)
                             .row()
                             .add(Text('üè° –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', {'logged': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                             )
    await writing_to_file('settings')


@bot.on.private_message(payload={'show': 'userdata'})
async def show_userdata(message: Message):
    login, password = db.get(message.from_id)[0][2], db.get(message.from_id)[0][3]
    res = await message.answer(message=f'ü§≠ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\nüîí –õ–æ–≥–∏–Ω: {login}\nüîë –ü–∞—Ä–æ–ª—å: {password}\n')

    await logged_menu(message)
    await sleep(30)
    await bot.api.messages.delete(peer_id=message.from_id,
                                  message_ids=res.message_id,
                                  delete_for_all=True)
    await writing_to_file('show_userdata')


@bot.on.private_message(lev='–ña–ª–æ–±a/–üp–µ–¥–ªo–∂–µ–Ω–∏e')
@bot.on.private_message(payload={'settings': 'info'})
async def report_to_admin(message: Message):
    await bot.state_dispenser.set(message.from_id, States.report)
    await message.answer(message='‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–π –∂–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏ –æ–Ω —Ç—É—Ç –∂–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:')
    await writing_to_file('report_to_admin')


@bot.on.private_message(state=States.report)
async def report_to_dev(message: Message):
    user = db.get(message.from_id)[0]
    user_id, vk_id = user[0], user[1]
    msg = f'New Feedback from ' \
          f'| {user_id} | @id{vk_id} |\n' \
          f'Text: \n{message.text}'
    await bot.api.messages.send(peer_id=feedback_chat, random_id=0, message=msg)
    await message.answer(
        message='‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 1 —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n–°–ø–∞—Å–∏–±–æ –∑–∞ –§–∏–¥–±—ç–∫ = )')
    await bot.state_dispenser.delete(message.from_id)
    await logged_menu(message)
    await writing_to_file('report_to_dev')


# ADMIN COMANDS
@bot.on.message(text=['.—É–¥–∞–ª–∏—Ç—å <id_del>'])
async def deleting_user(message: Message, id_del):
    if message.from_id == 359707430:
        await message.answer(db.del_user(id_del))


@bot.on.message(text=['.–≤—Å–µ'])
async def all_users(message: Message):
    if message.from_id == 359707430:
        answers = f''
        everyone = db.get_all()
        for user in everyone:
            answers += f'{user[0]} | {user[5]} {user[6]} | [id{user[1]}|{user[5]}] | {user[-1]}\n'
        await message.answer(answers)


@bot.on.message(text='.–∏–∑–º–µ–Ω–∏—Ç—å <user> <param> <value>')
async def changing_params(message: Message, user, param, value):
    if message.from_id == 359707430:
        await message.answer(message=db.change_user(user, param, value))


@bot.on.message(text='.—Ö–µ–ª–ø')
async def help_command(message: Message):
    if message.from_id == 359707430:
        await message.answer(message="Dev-commands:\n\n"
                                     "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: .–≤—Å–µ\n"
                                     "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .–∏–∑–º–µ–Ω–∏—Ç—å <id> <param> <value>\n"
                                     "–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .–≥–µ—Ç <id> <param>\n"
                                     "–ù–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .–ø–∞—Ä–∞–º\n"
                                     "–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫: .–æ—à–∏–±–∫–∏\n"
                                     "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .—É–¥–∞–ª–∏—Ç—å")


@bot.on.message(text='.–≥–µ—Ç <user> <param>')
async def changing_params(message: Message, user, param):
    if message.from_id == 359707430:
        result = db.get_value_param(user, param)
        if result != '':
            await message.answer(message=result)
        else:
            await message.answer(f'No one of: {param}')


@bot.on.message(text='.–ø–∞—Ä–∞–º')
async def sending_params(message: Message):
    if message.from_id == 359707430:
        await message.answer("""id integer primary key autoincrement,
                    userid INT,
                    sgo_login TEXT,
                    sgo_password TEXT,
                    output_type TEXT,
                    name TEXT,
                    sec_name TEXT,
                    site_sgo TEXT,
                    school TEXT,
                    is_auth Text""")


@bot.on.message(text='.–∫–∏–ª–ª')
async def killing(message: Message):
    if message.from_id == 359707430:
        sys.exit()


@bot.on.private_message(text='.–æ—à–∏–±–∫–∏')
async def logging_send(message: Message):
    if message.from_id == 359707430:
        doc = await DocMessagesUploader(bot.api).upload(
            title='text.txt',
            file_source='/home/greench/mlok/BotData/Logs/errors.txt',
            peer_id=message.from_id)
        await message.answer('–õ–æ–≥–∏:', attachment=doc)


@bot.on.message(text='.–ª–æ–≥–∏–Ω_<login>_<password>_<site>_<school>')
async def detail_lesson(message: Message, login, password, site, school):
    if message.from_id == 359707430:
        ns = NetSchoolAPI(site)
        await ns.login(login, password, school)
        await message.answer(str(await ns.diary()))


@bot.on.message(text='.–æ—Ç—á–µ—Ç')
async def report_admin(message: Message):
    if message.from_id == 359707430:
        num_functions = {}
        everyone = db.get_all()
        authed = 0
        for user in everyone:
            if user[-1] == 'Yes':
                authed += 1
        msg = f'–û—Ç—á–µ—Ç:\n\n' \
              f'–í—Ä–µ–º—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {int((time.time() - start_time) // 3600)} —á. ' \
              f'{int((time.time() - start_time) // 60)} –º–∏–Ω. {int((time.time() - start_time) % 60)} —Å.\n' \
              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(everyone)}\n\n' \
              f'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {authed}\n\n' \
              f'–§—É–Ω–∫—Ü–∏–∏:\n'

        with open('BotData/Logs/logs_functions.txt', 'r') as filer:
            file = filer.readlines()
            for function in file[0].split(' ')[:-1]:
                num_functions[function] = num_functions.get(function, 0) + 1
            filer.close()

        num_functions = dict(reversed(sorted(num_functions.items(), key=lambda item: item[1])))
        for function in num_functions.keys():
            msg += f'{function}: {num_functions[function]} —à—Ç.\n'

        await message.answer(msg)


# Base handler #
@bot.on.private_message()
async def logged_menu_auto(message: Message):
    user = db.get(message.from_id)[0][-2]
    try:
        await bot.state_dispenser.delete(message.peer_id)
    except:
        pass
    if user == '–ú–û–£ –≥–∏–º–Ω–∞–∑–∏—è ‚Ññ 10':
        paylo = {'logged': 'schedule'}
    else:
        paylo = {'schedule': 'week'}
    keyboard = (
        Keyboard(inline=False, one_time=False)
        .add(Text('üìö –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', {'schedule': 'full_week'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìñ –î–Ω–µ–≤–Ω–∏–∫', {'logged': 'diary'}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', payload=paylo), color=KeyboardButtonColor.PRIMARY)
        .add(Text('üìù –û—Ç—á–µ—Ç', {'logged': 'parentReport'}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {'logged': 'settings'}), color=KeyboardButtonColor.SECONDARY)
    )
    if not await islogged(message.from_id):
        text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.\n' \
               '–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—ã–¥—É–º–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤—ã–¥—É–º–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏.\n\n' \
               '–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ = )'
        keyboard.row().add(Text('–í–æ–π—Ç–∏ –≤ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫', {'variant': 'login'}),
                           color=KeyboardButtonColor.POSITIVE)
    else:
        text = '–ú–µ–Ω—é...'
    await message.answer(
        message=text, keyboard=keyboard
    )
    await writing_to_file('logged_menu_auto')


if __name__ == '__main__':
    start_time = time.time()
    bot.run_forever()
